// Auto-generated. Do not edit!

// (in-package cob_people_detection.msg)


"use strict";

let _serializer = require('../base_serialize.js');
let _deserializer = require('../base_deserialize.js');
let _finder = require('../find.js');

//-----------------------------------------------------------

class updateDataGoal {
  constructor() {
    this.update_mode = 0;
    this.update_index = 0;
    this.old_label = '';
    this.new_label = '';
  }

  static serialize(obj, bufferInfo) {
    // Serializes a message object of type updateDataGoal
    // Serialize message field [update_mode]
    bufferInfo = _serializer.int32(obj.update_mode, bufferInfo);
    // Serialize message field [update_index]
    bufferInfo = _serializer.int32(obj.update_index, bufferInfo);
    // Serialize message field [old_label]
    bufferInfo = _serializer.string(obj.old_label, bufferInfo);
    // Serialize message field [new_label]
    bufferInfo = _serializer.string(obj.new_label, bufferInfo);
    return bufferInfo;
  }

  static deserialize(buffer) {
    //deserializes a message object of type updateDataGoal
    let tmp;
    let len;
    let data = new updateDataGoal();
    // Deserialize message field [update_mode]
    tmp = _deserializer.int32(buffer);
    data.update_mode = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [update_index]
    tmp = _deserializer.int32(buffer);
    data.update_index = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [old_label]
    tmp = _deserializer.string(buffer);
    data.old_label = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [new_label]
    tmp = _deserializer.string(buffer);
    data.new_label = tmp.data;
    buffer = tmp.buffer;
    return {
      data: data,
      buffer: buffer
    }
  }

  static datatype() {
    // Returns string type for a message object
    return 'cob_people_detection/updateDataGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'd34a17444815de8f9d0fe51faa3bd9da';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Updates data in the training database
    #
    # goal message
    int32 update_mode			# update the label with new_label either for 1=one image given the update_index, 2=all entries labeled with old_label
    int32 update_index			# the database entry with this index number shall be updated with a new label
    string old_label			# all database entries carrying this label are to be updated with new_label
    string new_label			# the new label that is supposed to replace the old one
    
    `;
  }

};

module.exports = updateDataGoal;
