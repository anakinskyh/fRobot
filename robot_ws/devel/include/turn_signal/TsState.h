// Generated by gencpp from file turn_signal/TsState.msg
// DO NOT EDIT!


#ifndef TURN_SIGNAL_MESSAGE_TSSTATE_H
#define TURN_SIGNAL_MESSAGE_TSSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turn_signal
{
template <class ContainerAllocator>
struct TsState_
{
  typedef TsState_<ContainerAllocator> Type;

  TsState_()
    : ts_state()
    , vel_x(0.0)
    , vel_z(0.0)  {
    }
  TsState_(const ContainerAllocator& _alloc)
    : ts_state(_alloc)
    , vel_x(0.0)
    , vel_z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ts_state_type;
  _ts_state_type ts_state;

   typedef double _vel_x_type;
  _vel_x_type vel_x;

   typedef double _vel_z_type;
  _vel_z_type vel_z;




  typedef boost::shared_ptr< ::turn_signal::TsState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turn_signal::TsState_<ContainerAllocator> const> ConstPtr;

}; // struct TsState_

typedef ::turn_signal::TsState_<std::allocator<void> > TsState;

typedef boost::shared_ptr< ::turn_signal::TsState > TsStatePtr;
typedef boost::shared_ptr< ::turn_signal::TsState const> TsStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turn_signal::TsState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turn_signal::TsState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace turn_signal

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'turn_signal': ['/home/anakin/Workspace/2016/Robot/fRobot/robot_ws/src/turn_signal/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::turn_signal::TsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turn_signal::TsState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turn_signal::TsState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turn_signal::TsState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turn_signal::TsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turn_signal::TsState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turn_signal::TsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95ee8a066fcea024761b73fe1908bab6";
  }

  static const char* value(const ::turn_signal::TsState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95ee8a066fcea024ULL;
  static const uint64_t static_value2 = 0x761b73fe1908bab6ULL;
};

template<class ContainerAllocator>
struct DataType< ::turn_signal::TsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turn_signal/TsState";
  }

  static const char* value(const ::turn_signal::TsState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turn_signal::TsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ts_state\n\
float64 vel_x\n\
float64 vel_z\n\
";
  }

  static const char* value(const ::turn_signal::TsState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turn_signal::TsState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ts_state);
      stream.next(m.vel_x);
      stream.next(m.vel_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct TsState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turn_signal::TsState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turn_signal::TsState_<ContainerAllocator>& v)
  {
    s << indent << "ts_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ts_state);
    s << indent << "vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.vel_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURN_SIGNAL_MESSAGE_TSSTATE_H
