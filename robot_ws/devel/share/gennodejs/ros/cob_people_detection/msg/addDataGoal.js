// Auto-generated. Do not edit!

// (in-package cob_people_detection.msg)


"use strict";

let _serializer = require('../base_serialize.js');
let _deserializer = require('../base_deserialize.js');
let _finder = require('../find.js');

//-----------------------------------------------------------

class addDataGoal {
  constructor() {
    this.label = '';
    this.capture_mode = 0;
    this.continuous_mode_images_to_capture = 0;
    this.continuous_mode_delay = 0.0;
  }

  static serialize(obj, bufferInfo) {
    // Serializes a message object of type addDataGoal
    // Serialize message field [label]
    bufferInfo = _serializer.string(obj.label, bufferInfo);
    // Serialize message field [capture_mode]
    bufferInfo = _serializer.int32(obj.capture_mode, bufferInfo);
    // Serialize message field [continuous_mode_images_to_capture]
    bufferInfo = _serializer.int32(obj.continuous_mode_images_to_capture, bufferInfo);
    // Serialize message field [continuous_mode_delay]
    bufferInfo = _serializer.float32(obj.continuous_mode_delay, bufferInfo);
    return bufferInfo;
  }

  static deserialize(buffer) {
    //deserializes a message object of type addDataGoal
    let tmp;
    let len;
    let data = new addDataGoal();
    // Deserialize message field [label]
    tmp = _deserializer.string(buffer);
    data.label = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [capture_mode]
    tmp = _deserializer.int32(buffer);
    data.capture_mode = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [continuous_mode_images_to_capture]
    tmp = _deserializer.int32(buffer);
    data.continuous_mode_images_to_capture = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [continuous_mode_delay]
    tmp = _deserializer.float32(buffer);
    data.continuous_mode_delay = tmp.data;
    buffer = tmp.buffer;
    return {
      data: data,
      buffer: buffer
    }
  }

  static datatype() {
    // Returns string type for a message object
    return 'cob_people_detection/addDataGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '2c9c666c7dd8f1cd1885c5fee48c91b1';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Adds data to the training database
    #
    # goal message
    string label				# a label for the data which shall be added
    int32 capture_mode			# mode of data capture: 0=manual (i.e. initiate data capture with service messages), 1=continuous
    int32 continuous_mode_images_to_capture	# if the continuous mode is selected this number specifies how many images shall be captured
    float32 continuous_mode_delay		# if the continuous mode is selected this number specifies the delay time between the recording of two successive images (in seconds)
    
    `;
  }

};

module.exports = addDataGoal;
